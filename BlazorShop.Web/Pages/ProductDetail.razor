@page "/ProductDetail/{Id:int}"
@using System.Globalization
@inject IProdutoService produtoService

<h2>Product Page</h2>

 @if (Produto is null && MensagemErro is null)
 {
     <ShowSpinner />
    // <ShowSpinner2 />
 }
 else if (MensagemErro is not null)
 {
     <ShowError MensageError="@MensagemErro"></ShowError>
 }
 else
 {
     <h3 class="mb-5">Detalhes do Produto</h3>
     <div class="row">
         <div class="col-md-6 mb-4">
             <img class="img-fluid" src="@Produto.ImagemUrl">
         </div>
         <div class="col-md-6">
             <h3>@Produto.Name</h3>
             <p class="mb-4">@Produto.Description</p>
             <p class="mb-4">
                <b>
                    @{
                        CultureInfo cultureInfo = new CultureInfo("pt_PT"); // Use "pt-BR" for Brazilian Portuguese
                        cultureInfo.NumberFormat.CurrencySymbol = "R$";
                        cultureInfo.NumberFormat.CurrencyDecimalSeparator = ",";}
                    @Produto.Price.ToString("C", cultureInfo)&nbsp;(@Produto.qtdInStock items em estoque)
                
                 </b>
             </p>
             <div>
                 <button class="btn btn-success"
                        @onclick="() => AddToCar_click(new ShopCarItemsAdd_DTO{
                         carId = LogedUser.carId,
                         productId = Produto.productId,
                         qtd = 1
                     })">
                     Incluir no Carrinho
                 </button>
             </div>

         </div>
     </div>
 }
@code {
    [Inject]
    public IProdutoService? ProdutoService { get; set; }
    [Inject]
    public ICarrinhoCompraService? carShopService { get; set; }

    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService?
                GerenciaProdutosLocalStorageService { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService?
                  GerenciaCarrinhoItensLocalStorageService { get; set; }

    private List<ShopItems_DTO>? carItems_list { get; set; } = new List<ShopItems_DTO>();

    [Parameter]
    public int Id { get; set; }

    public Product_DTO? Produto { get; set; }

    public string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            //CarrinhoCompraItens = await GerenciaCarrinhoItensLocalStorageService.GetCollection();
            Produto = await ProdutoService.GetItem(Id);
            //Produto = await GetProdutoPorId(Id);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task AddToCar_click(ShopCarItemsAdd_DTO addedCar_DTO)
    {
        try
        {
            var shopItem_DTO = await carShopService.AdicionaItem(addedCar_DTO);

            if (shopItem_DTO != null)
            {
                carItems_list.Add(shopItem_DTO);
                await GerenciaCarrinhoItensLocalStorageService.SaveCollection(carItems_list);
            }

            NavigationManager.NavigateTo("/CarShop");
        }
        catch (Exception ex)
        {
            //Log Exception
            MensagemErro = ex.ToString();
        }
     }

       private async Task<Product_DTO> GetProdutoPorId(int id)
     {
         var produtosDto = await GerenciaProdutosLocalStorageService.GetCollection();

         if (produtosDto != null)
         {
             return produtosDto.SingleOrDefault(p => p.productId == id);
         }
         return null;
     } 
 }