@page "/products"
@inject IProdutoService produtoService

    <h3>Carregando Produtos...</h3>
@*

 @if (Produtos == null)
 {
     //<ExibirSpinner />
     <h3>Carregando Produtos...</h3>
 }
 else
 {
     <h3>Carregando Produtos...</h3>
    @*   <h3 class="mb-5">Produtos</h3>
      @if (Produtos.Count() > 0)
      {
          var produtosPorCategoria = from produto in Produtos
                                     group produto by produto.CategoryId into prodPorCatGrupo
                                     orderby prodPorCatGrupo.Key
                                     select prodPorCatGrupo;

          @foreach (var prodGrupo in produtosPorCategoria)
          {
              <h4>@prodGrupo.FirstOrDefault(pg=> pg.CategoryId == prodGrupo.Key).CategoryName</h4>
              <div class="row mt-3">
                  <ExibirProdutos Produtos="@prodGrupo"></ExibirProdutos>
              </div>
              <hr class="mb-2"/>
          }        
      } 
 }
*@

@code {@*
    public IEnumerable<Produto_DTO>? Produtos { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService?
                 GerenciaProdutosLocalStorageService
    { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService?
                 GerenciaCarrinhoItensLocalStorageService
    { get; set; }

    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    public string? MensagemErro { get; set; }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LimpaLocalStorage();

            Produtos = await GerenciaProdutosLocalStorageService.GetCollection();

            var carrinhoCompraItens = await GerenciaCarrinhoItensLocalStorageService
                                           .GetCollection();

            var totalQuantidade = carrinhoCompraItens.Sum(i => i.qtd);

            CarrinhoCompraService.RaiseEventOnCarrinhoCompraChanged(totalQuantidade);

        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    private async Task LimpaLocalStorage()
    {
        await GerenciaProdutosLocalStorageService.RemoveCollection();
        await GerenciaCarrinhoItensLocalStorageService.RemoveCollection();
    }*@
}
